#!/usr/bin/env pwsh
Set-StrictMode -Version Latest
$ErrorActionPreference = "Stop"

# ====== 1. 선택 UI ======
Write-Host "=== Galaxy Emulator Launcher ==="
Write-Host "1) Galaxy Note 10"
Write-Host "2) Galaxy Note 20"
Write-Host "3) Galaxy S22"
$CHOICE = Read-Host "Select device [1-3]"

switch ($CHOICE) {
    1 {
        $DEVICE = "note10"
        $API = 29
        $IMG = "system-images;android-$API;google_apis_playstore;x86_64"
        $AVD_NAME = "Galaxy_Note10_256GB"
    }
    2 {
        $DEVICE = "note20"
        $API = 30
        $IMG = "system-images;android-$API;google_apis_playstore;x86_64"
        $AVD_NAME = "Galaxy_Note20_256GB"
    }
    3 {
        $DEVICE = "s22"
        $API = 32
        $IMG = "system-images;android-$API;google_apis_playstore;x86_64"
        $AVD_NAME = "Galaxy_S22_256GB"
    }
    Default {
        Write-Host "❌ Invalid selection" -ForegroundColor Red
        exit 1
    }
}

# ====== 2. 프로필 파일 존재 확인 ======
$PROFILE_PATH = ".\profiles\$DEVICE.ini"
if (!(Test-Path $PROFILE_PATH)) {
    Write-Host "❌ Profile file not found: $PROFILE_PATH" -ForegroundColor Red
    exit 1
}

# ====== 3. SDK 이미지 설치 ======
Write-Host "[INFO] Installing required system image..."
& sdkmanager --install "$IMG"

# ====== 4. AVD 생성 ======
Write-Host "[INFO] Creating AVD: $AVD_NAME"
& avdmanager create avd -n "$AVD_NAME" -k "$IMG" --device "pixel" --force

# AVD 설정 파일 경로
$AVD_PATH = "$env:USERPROFILE\.android\avd\$AVD_NAME.avd\config.ini"

# ====== 5. 하드웨어 프로필 적용 ======
Write-Host "[INFO] Applying hardware profile from $PROFILE_PATH"
Get-Content $PROFILE_PATH | Add-Content $AVD_PATH

# ====== 6. 에뮬레이터 실행 ======
Write-Host "[INFO] Launching emulator..."
Start-Process "emulator" -ArgumentList "-avd", "$AVD_NAME", "-netdelay", "none", "-netspeed", "full", "-gpu", "host"







# ---------------------------------------------------------
# (6.5) 스킨 폴더를 SDK 경로로 복사
# ---------------------------------------------------------
echo "[INFO] SDK 경로로 스킨 폴더 복사 중..."

SRC_SKINS_DIR="$SCRIPT_DIR/skins"
DEST_SKINS_DIR="$SDK_ROOT/skins"

# SDK 내부 skins 폴더가 없으면 생성
mkdir -p "$DEST_SKINS_DIR"

# 사용자 스킨 폴더 전체를 복사 (기존 파일 덮어쓰기)
if [ -d "$SRC_SKINS_DIR" ]; then
  echo "[INFO] $SRC_SKINS_DIR → $DEST_SKINS_DIR 복사"
  cp -r "$SRC_SKINS_DIR"/* "$DEST_SKINS_DIR"/
  echo "[OK] 스킨 복사 완료."
else
  echo "[WARN] $SRC_SKINS_DIR 폴더를 찾을 수 없습니다. 스킨 복사는 생략됩니다."
fi

# 이제 config.ini에서 절대경로 대신 이름만 써도 인식됨



takeown /f "$env:USERPROFILE\.android" /r /d y
icacls "$env:USERPROFILE\.android" /grant "${env:USERNAME}:(OI)(CI)F" /t




# --- Fix Samsung skin path automatically ---
AVD_PATH="$HOME/.android/avd/${AVD_NAME}.avd"
SKIN_ABS_PATH="$(cd "$SKIN_DIR"; pwd)"
echo "[INFO] 스킨 경로 보정 중: $SKIN_ABS_PATH"

# 기존 skin.name, skin.path 제거 후 다시 기록
grep -v '^skin\.' "$AVD_PATH/config.ini" > "$AVD_PATH/config.tmp" || true
mv "$AVD_PATH/config.tmp" "$AVD_PATH/config.ini"

cat >> "$AVD_PATH/config.ini" <<EOF
skin.name=$(basename "$SKIN_ABS_PATH")
skin.path=$SKIN_ABS_PATH
EOF




#!/usr/bin/env bash
set -e

# ========================================
# Android Emulator Full Setup (bash version)
# ========================================

SDK_ROOT="$HOME/android-sdk"
CMDLINE_URL="https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip"
AVD_NAME="custom_avd"
JDK_PATH=""

echo "====================================="
echo "   Android Emulator Auto Setup"
echo "====================================="

# ---------------------------------------------------------
# (1) JDK 설치 확인 및 경로 설정
# ---------------------------------------------------------
if ! command -v java >/dev/null 2>&1; then
  echo "[INFO] JDK가 설치되어 있지 않습니다."
  read -p "OpenJDK 17을 설치할까요? (y/n, 기본값 y): " install_jdk
  install_jdk=${install_jdk:-y}
  if [[ "$install_jdk" == "y" ]]; then
    if command -v apt >/dev/null 2>&1; then
      sudo apt update -y
      sudo apt install -y openjdk-17-jdk
    elif command -v dnf >/dev/null 2>&1; then
      sudo dnf install -y java-17-openjdk
    elif command -v brew >/dev/null 2>&1; then
      brew install openjdk@17
    else
      echo "[ERROR] 패키지 매니저를 찾을 수 없습니다. 수동으로 JDK를 설치하세요."
      exit 1
    fi
  else
    echo "[ERROR] JDK 없이 진행 불가"
    exit 1
  fi
fi

# JDK 경로 자동 탐색
JDK_PATH=$(dirname "$(dirname "$(readlink -f "$(which java)")")")
if [[ -z "$JDK_PATH" || ! -d "$JDK_PATH" ]]; then
  echo "[WARN] JDK 설치 경로를 자동으로 찾지 못했습니다. JAVA_HOME을 수동 지정하세요."
  read -p "JAVA_HOME 경로 입력 (예: /usr/lib/jvm/java-17-openjdk-amd64): " manual_jdk
  export JAVA_HOME="${manual_jdk}"
else
  export JAVA_HOME="$JDK_PATH"
fi

export PATH="$JAVA_HOME/bin:$PATH"

java -version || { echo "[ERROR] java 명령을 찾을 수 없습니다."; exit 1; }

echo "[OK] JAVA_HOME=$JAVA_HOME"

# ---------------------------------------------------------
# (2) Android SDK Commandline Tools 설치
# ---------------------------------------------------------
if [ ! -d "$SDK_ROOT" ]; then
  echo "[INFO] Android SDK Commandline Tools를 다운로드 중..."
  mkdir -p "$SDK_ROOT/cmdline-tools"
  cd "$SDK_ROOT"
  curl -L -o cmdline-tools.zip "$CMDLINE_URL"
  unzip -q cmdline-tools.zip -d cmdline-tools
  mv cmdline-tools/cmdline-tools cmdline-tools/latest
  rm cmdline-tools.zip
fi

export ANDROID_HOME="$SDK_ROOT"
export ANDROID_SDK_ROOT="$SDK_ROOT"
export PATH="$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/emulator:$ANDROID_HOME/platform-tools:$PATH"

# ---------------------------------------------------------
# (3) SDK 구성요소 설치 (HTTPS 차단 시 no_https 사용)
# ---------------------------------------------------------
echo "[INFO] SDK 구성요소 설치 중..."
mkdir -p "$HOME/.android"
touch "$HOME/.android/repositories.cfg"

# 폴더 구조 자동 교정
if [ -d "$ANDROID_HOME/cmdline-tools/cmdline-tools" ]; then
  mv "$ANDROID_HOME/cmdline-tools/cmdline-tools" "$ANDROID_HOME/cmdline-tools/latest"
fi

SDKMANAGER="$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager"

# HTTPS 우회 모드
$SDKMANAGER --no_https --licenses >/dev/null || true
$SDKMANAGER --no_https "platform-tools" "emulator"

# ---------------------------------------------------------
# (4) Android 시스템 이미지 선택 및 설치
# ---------------------------------------------------------
echo
echo "어떤 안드로이드 시스템 이미지를 사용할까요?"
echo "1) Android 13 (Google APIs)"
echo "2) Android 14 (Google Play)"
read -p "번호 입력 (기본값 2): " sys_choice
sys_choice=${sys_choice:-2}

if [[ "$sys_choice" == "1" ]]; then
  SYS_IMG="system-images;android-33;google_apis;x86_64"
else
  SYS_IMG="system-images;android-34;google_apis_playstore;x86_64"
fi

$SDKMANAGER --no_https "$SYS_IMG"

# ---------------------------------------------------------
# (5) 스킨 선택 (로컬 skins/ 폴더에서)
# ---------------------------------------------------------
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
echo
echo "어떤 하드웨어를 AVD로 생성할까요?"
echo "1) Samsung Galaxy Note20"
echo "2) Samsung Galaxy S22"
echo "3) Samsung Galaxy S24 Ultra"
read -p "번호 입력 (기본값 2): " hw_choice
hw_choice=${hw_choice:-2}

case $hw_choice in
  1) HW_NAME="Galaxy_Note20" ;;
  2) HW_NAME="Galaxy_S22" ;;
  3) HW_NAME="Galaxy_S24Ultra" ;;
esac

SKIN_DIR="$SCRIPT_DIR/skins/$HW_NAME"
if [ ! -d "$SKIN_DIR" ]; then
  echo "[ERROR] 스킨 폴더가 존재하지 않습니다: $SKIN_DIR"
  exit 1
fi
echo "[INFO] 스킨 경로 인식 완료: $SKIN_DIR"

# ---------------------------------------------------------
# (6) RAM / 스토리지 설정
# ---------------------------------------------------------
read -p "RAM 크기(MB) [기본값 4096]: " RAM_SIZE
RAM_SIZE=${RAM_SIZE:-4096}
read -p "스토리지 크기(MB) [기본값 8192]: " STORAGE_SIZE
STORAGE_SIZE=${STORAGE_SIZE:-8192}

# ---------------------------------------------------------
# (7) AVD 생성
# ---------------------------------------------------------
echo "[INFO] AVD 생성 중..."
yes "no" | avdmanager create avd \
  -n "$AVD_NAME" \
  -k "$SYS_IMG" \
  -d pixel_6 \
  --sdcard "${STORAGE_SIZE}M" \
  --force

AVD_PATH="$HOME/.android/avd/${AVD_NAME}.avd"
cat >> "$AVD_PATH/config.ini" <<EOF
hw.ramSize=$RAM_SIZE
skin.name=$HW_NAME
skin.path=$SKIN_DIR
EOF

# ---------------------------------------------------------
# (8) 에뮬레이터 실행
# ---------------------------------------------------------
echo "[INFO] 에뮬레이터를 실행합니다..."
emulator -avd "$AVD_NAME" -netdelay none -netspeed full &







::::::::::::
#!/usr/bin/env bash

set -e

# ============================
# 기본 설정
# ============================
SDK_ROOT="$HOME/android-sdk"
CMDLINE_URL="https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip"
AVD_NAME="custom_avd"

echo "====================================="
echo "  Android Emulator Setup Wizard"
echo "====================================="

# ============================
# (1) JDK 설치 여부 확인
# ============================
if ! command -v java >/dev/null 2>&1; then
  echo "[INFO] JDK가 설치되어 있지 않습니다."
  read -p "OpenJDK 17을 설치할까요? (y/n): " install_jdk
  if [[ "$install_jdk" == "y" ]]; then
    sudo apt update -y
    sudo apt install -y openjdk-17-jdk
  else
    echo "JDK 설치 없이 진행할 수 없습니다. 종료합니다."
    exit 1
  fi
else
  echo "[OK] JDK가 이미 설치되어 있습니다."
fi

# ============================
# (2) SDK / 명령줄 도구 설치
# ============================
if [ ! -d "$SDK_ROOT" ]; then
  echo "[INFO] Android SDK를 설치합니다..."
  mkdir -p "$SDK_ROOT/cmdline-tools"
  cd "$SDK_ROOT"
  curl -o cmdline-tools.zip $CMDLINE_URL
  unzip cmdline-tools.zip -d cmdline-tools
  mv cmdline-tools/cmdline-tools cmdline-tools/latest
  rm cmdline-tools.zip
fi

export ANDROID_HOME="$SDK_ROOT"
export PATH="$ANDROID_HOME/emulator:$ANDROID_HOME/tools:$ANDROID_HOME/tools/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/cmdline-tools/latest/bin:$PATH"

# ============================
# SDK 패키지 설치
# ============================
echo "[INFO] SDK 구성요소를 업데이트 중..."
yes | sdkmanager --licenses >/dev/null || true
yes | sdkmanager "platform-tools" "emulator" >/dev/null

# ============================
# (3) 하드웨어 기기 선택
# ============================
echo
echo "어떤 하드웨어를 AVD로 생성할까요?"
echo "1) Samsung Galaxy Note20"
echo "2) Samsung Galaxy S22"
echo "3) Samsung Galaxy S24 Ultra"
read -p "번호를 입력하세요 (1~3): " hw_choice

case $hw_choice in
  1) HW_NAME="Galaxy_Note20"; SKIN_URL="https://developer.samsung.com/android/tools/emulator-skins/Note20.zip" ;;
  2) HW_NAME="Galaxy_S22"; SKIN_URL="https://developer.samsung.com/android/tools/emulator-skins/S22.zip" ;;
  3) HW_NAME="Galaxy_S24Ultra"; SKIN_URL="https://developer.samsung.com/android/tools/emulator-skins/S24Ultra.zip" ;;
  *) echo "잘못된 선택입니다."; exit 1 ;;
esac

SKIN_DIR="$ANDROID_HOME/skins/$HW_NAME"
mkdir -p "$SKIN_DIR"
echo "[INFO] 삼성 스킨 다운로드 중..."
curl -L -o "$SDK_ROOT/${HW_NAME}.zip" "$SKIN_URL"
unzip -o "$SDK_ROOT/${HW_NAME}.zip" -d "$SKIN_DIR"
rm "$SDK_ROOT/${HW_NAME}.zip"

# ============================
# (4) 시스템 이미지 선택
# ============================
echo
echo "어떤 안드로이드 시스템 이미지를 사용할까요?"
echo "1) Android 13 (Google APIs)"
echo "2) Android 14 (Google Play)"
read -p "번호를 입력하세요 (1~2): " sys_choice

case $sys_choice in
  1) SYS_IMG="system-images;android-33;google_apis;x86_64" ;;
  2) SYS_IMG="system-images;android-34;google_apis_playstore;x86_64" ;;
  *) echo "잘못된 선택입니다."; exit 1 ;;
esac

echo "[INFO] 시스템 이미지 다운로드 중..."
yes | sdkmanager "$SYS_IMG"

# ============================
# (5) 하드웨어 프로필 설정
# ============================
read -p "RAM 크기(MB): " RAM_SIZE
read -p "스토리지 크기(MB): " STORAGE_SIZE

# ============================
# (6) AVD 생성
# ============================
echo "[INFO] AVD를 생성 중..."
echo no | avdmanager create avd \
  -n "$AVD_NAME" \
  -k "$SYS_IMG" \
  -d pixel_6 \
  --sdcard "${STORAGE_SIZE}M" \
  --force

# config.ini 수정
AVD_PATH="$HOME/.android/avd/${AVD_NAME}.avd"
cat >> "$AVD_PATH/config.ini" <<EOF
hw.ramSize=$RAM_SIZE
skin.name=$HW_NAME
skin.path=$SKIN_DIR
EOF

# ============================
# (7) 에뮬레이터 실행
# ============================
echo "[INFO] 에뮬레이터를 실행합니다..."
emulator -avd "$AVD_NAME" -netdelay none -netspeed full &

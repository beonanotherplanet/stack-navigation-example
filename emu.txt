#!/usr/bin/env bash
set -e

echo "=== OpenJDK 17 Auto Installer ==="

# ----- Detect OS -----
OS="$(uname -s)"
echo "[INFO] Detected OS: $OS"

# ----- Detect architecture -----
ARCH="$(uname -m)"
case "$ARCH" in
  x86_64|amd64) ARCH_TAG="x64" ;;
  arm64|aarch64) ARCH_TAG="aarch64" ;;
  *) echo "[ERROR] Unsupported architecture: $ARCH"; exit 1 ;;
esac

# ----- Install based on platform -----
case "$OS" in
  Linux*)
    if command -v apt >/dev/null 2>&1; then
      echo "[INFO] Installing OpenJDK 17 using apt..."
      sudo apt update -y
      sudo apt install -y openjdk-17-jdk
    elif command -v dnf >/dev/null 2>&1; then
      echo "[INFO] Installing OpenJDK 17 using dnf..."
      sudo dnf install -y java-17-openjdk
    elif command -v yum >/dev/null 2>&1; then
      echo "[INFO] Installing OpenJDK 17 using yum..."
      sudo yum install -y java-17-openjdk
    else
      echo "[ERROR] No supported package manager found. Please install manually."
      exit 1
    fi
    ;;

  Darwin*)
    if command -v brew >/dev/null 2>&1; then
      echo "[INFO] Installing OpenJDK 17 using Homebrew..."
      brew install openjdk@17
      sudo ln -sfn "$(brew --prefix)/opt/openjdk@17/libexec/openjdk.jdk" /Library/Java/JavaVirtualMachines/openjdk-17.jdk
    else
      echo "[ERROR] Homebrew not found. Please install it from https://brew.sh"
      exit 1
    fi
    ;;

  MINGW*|MSYS*|CYGWIN*)
    # ----- Windows (Git Bash or MSYS2) -----
    echo "[INFO] Installing OpenJDK 17 for Windows..."

    BASE_DIR="$HOME/AndroidEnv"
    JDK_DIR="$BASE_DIR/jdk-17"
    ZIP_PATH="$BASE_DIR/jdk.zip"
    URL="https://aka.ms/download-jdk/microsoft-jdk-17.0.11-windows-${ARCH_TAG}.zip"

    mkdir -p "$BASE_DIR"
    echo "[INFO] Downloading from $URL..."
    curl -L "$URL" -o "$ZIP_PATH"

    echo "[INFO] Extracting..."
    unzip -q "$ZIP_PATH" -d "$BASE_DIR"
    rm -f "$ZIP_PATH"

    # Auto-rename extracted folder (jdk-17.* ‚Üí jdk-17)
    EXTRACTED_DIR=$(find "$BASE_DIR" -maxdepth 1 -type d -name "jdk-17*" | head -n 1)
    if [ "$EXTRACTED_DIR" != "$JDK_DIR" ]; then
      mv "$EXTRACTED_DIR" "$JDK_DIR"
    fi

    echo "[INFO] Setting JAVA_HOME and PATH..."
    export JAVA_HOME="$JDK_DIR"
    export PATH="$JAVA_HOME/bin:$PATH"

    # Optional: persist environment variables
    if [[ "$SHELL" == *"bash"* ]]; then
      PROFILE="$HOME/.bashrc"
    else
      PROFILE="$HOME/.profile"
    fi

    {
      echo ""
      echo "# OpenJDK 17"
      echo "export JAVA_HOME=\"$JAVA_HOME\""
      echo "export PATH=\"\$JAVA_HOME/bin:\$PATH\""
    } >> "$PROFILE"

    echo "[SUCCESS] JDK installed to $JAVA_HOME"
    echo "[INFO] Restart your terminal or run: source $PROFILE"
    ;;

  *)
    echo "[ERROR] Unsupported OS: $OS"
    exit 1
    ;;
esac

# ----- Verify -----
echo
echo "[INFO] Checking java version..."
java -version || echo "[WARN] Java command not found in PATH."

echo
echo "[DONE] OpenJDK 17 installation completed successfully."






#!/usr/bin/env pwsh
Set-StrictMode -Version Latest
$ErrorActionPreference = "Stop"

# ====== 0. Admin privilege check ======
if (-not ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {
    Write-Host "‚ö†Ô∏è  Please re-run PowerShell as Administrator."
    exit 1
}

# ====== 1. Paths ======
$BaseDir    = "$env:USERPROFILE\AndroidEnv"
$SdkRoot    = "$BaseDir\sdk"
$ToolsDir   = "$SdkRoot\cmdline-tools\latest"
$JavaDir    = "$BaseDir\jdk-17"
$ProfileDir = "$PSScriptRoot\profiles"
$ProfileFile= Join-Path $ProfileDir "note20.ini"
$AVD_DIR    = "$env:USERPROFILE\.android\avd"
$AVD_NAME   = "Galaxy_Note20_256GB"
$AVD_PATH   = "$AVD_DIR\$AVD_NAME.avd"
$AVD_CONFIG = "$AVD_PATH\config.ini"

New-Item -ItemType Directory -Force -Path $BaseDir | Out-Null

# ====== 2. Install Microsoft OpenJDK 17 ======
if (!(Test-Path "$JavaDir\bin\java.exe")) {
    Write-Host "[INFO] Installing Microsoft OpenJDK 17..."
    $jdkUrl  = "https://aka.ms/download-jdk/microsoft-jdk-17.0.11-windows-x64.zip"
    $zipPath = "$env:TEMP\jdk.zip"
    Invoke-WebRequest -Uri $jdkUrl -OutFile $zipPath -UseBasicParsing

    Expand-Archive -Force $zipPath -DestinationPath $BaseDir
    Remove-Item $zipPath -Force

    # Detect versioned folder automatically and rename to jdk-17
    $extracted = Get-ChildItem -Directory $BaseDir | Where-Object { $_.Name -like "jdk-17*" } | Select-Object -First 1
    if ($extracted -and $extracted.Name -ne "jdk-17") {
        Rename-Item -Path $extracted.FullName -NewName "jdk-17" -Force
    }
}

if (!(Test-Path "$JavaDir\bin\java.exe")) {
    Write-Host "‚ùå JDK installation failed. Verify path: $JavaDir"
    exit 1
}

$env:JAVA_HOME = $JavaDir
[Environment]::SetEnvironmentVariable("JAVA_HOME", $JavaDir, "Machine")
$env:Path += ";$JavaDir\bin"

# ====== 3. Install Android Command-line Tools ======
if (!(Test-Path "$ToolsDir\bin\sdkmanager.bat")) {
    Write-Host "[INFO] Installing Android Command-line Tools..."
    $sdkUrl  = "https://dl.google.com/android/repository/commandlinetools-win-11076708_latest.zip"
    $zipSdk  = "$env:TEMP\cmdtools.zip"
    Invoke-WebRequest -Uri $sdkUrl -OutFile $zipSdk -UseBasicParsing

    Expand-Archive -Force $zipSdk -DestinationPath "$SdkRoot\cmdline-tools"
    Rename-Item -Path "$SdkRoot\cmdline-tools\cmdline-tools" -NewName "latest"
    Remove-Item $zipSdk -Force
}

$env:ANDROID_SDK_ROOT = $SdkRoot
[Environment]::SetEnvironmentVariable("ANDROID_SDK_ROOT", $SdkRoot, "Machine")
$SdkBin      = "$ToolsDir\bin"
$EmulatorExe = "$SdkRoot\emulator\emulator.exe"
$AvdManager  = "$SdkBin\avdmanager.bat"

# ====== 4. Install SDK components ======
Write-Host "[INFO] Installing SDK components..."
& "$SdkBin\sdkmanager.bat" --sdk_root="$SdkRoot" --install "platform-tools" "emulator" | Out-Null

# ====== 5. Install system image ======
$API = 30
$IMG = "system-images;android-$API;google_apis_playstore;x86_64"
Write-Host "[INFO] Installing system image: $IMG"
& "$SdkBin\sdkmanager.bat" --sdk_root="$SdkRoot" --install "$IMG" | Out-Null

# ====== 6. Create AVD ======
if (!(Test-Path $AVD_PATH)) {
    Write-Host "[INFO] Creating AVD: $AVD_NAME"
    & $AvdManager create avd -n $AVD_NAME -k $IMG --device "pixel" --force | Out-Null
    Start-Sleep -Seconds 5
} else {
    Write-Host "[INFO] Existing AVD found: $AVD_NAME"
}

# Verify that config.ini exists
if (!(Test-Path $AVD_CONFIG)) {
    Write-Host "‚ùå AVD creation failed or config.ini not found."
    Write-Host "   Check: $AVD_PATH"
    exit 1
}

# ====== 7. Apply hardware profile ======
if (Test-Path $ProfileFile) {
    Write-Host "[INFO] Applying hardware profile from $ProfileFile"
    Get-Content $ProfileFile | Add-Content $AVD_CONFIG
} else {
    Write-Host "‚ö†Ô∏è  Hardware profile not found. Proceeding with default configuration."
}

# ====== 8. Launch emulator ======
if (!(Test-Path $EmulatorExe)) {
    Write-Host "‚ùå emulator.exe not found. Verify SDK installation: $EmulatorExe"
    exit 1
}

Write-Host "[INFO] Launching emulator..."
Start-Process "$EmulatorExe" -ArgumentList "-avd", "$AVD_NAME", "-netdelay", "none", "-netspeed", "full", "-gpu", "host"
Write-Host "[SUCCESS] Emulator launched successfully üöÄ"






#!/usr/bin/env pwsh
Set-StrictMode -Version Latest
$ErrorActionPreference = "Stop"

# ====== 0. Í¥ÄÎ¶¨Ïûê Í∂åÌïú ÌôïÏù∏ ======
if (-not ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {
    Write-Host "‚ö†Ô∏è  Í¥ÄÎ¶¨Ïûê Í∂åÌïúÏúºÎ°ú PowerShellÏùÑ Îã§Ïãú Ïã§ÌñâÌï¥Ï£ºÏÑ∏Ïöî."
    exit 1
}

# ====== 1. Í≤ΩÎ°ú ÏÑ§Ï†ï ======
$BaseDir    = "$env:USERPROFILE\AndroidEnv"
$SdkRoot    = "$BaseDir\sdk"
$ToolsDir   = "$SdkRoot\cmdline-tools\latest"
$JavaDir    = "$BaseDir\jdk-17"
$ProfileDir = "$PSScriptRoot\profiles"
$ProfileFile= Join-Path $ProfileDir "note20.ini"
$AVD_DIR    = "$env:USERPROFILE\.android\avd"
$AVD_NAME   = "Galaxy_Note20_256GB"
$AVD_PATH   = "$AVD_DIR\$AVD_NAME.avd"
$AVD_CONFIG = "$AVD_PATH\config.ini"

# ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ±
New-Item -ItemType Directory -Force -Path $BaseDir | Out-Null

# ====== 2. JDK ÏÑ§Ïπò ======
if (!(Test-Path "$JavaDir\bin\java.exe")) {
    Write-Host "[INFO] Installing Microsoft OpenJDK 17..."
    $jdkUrl = "https://aka.ms/download-jdk/microsoft-jdk-17.0.11-windows-x64.zip"
    $zipPath = "$env:TEMP\jdk.zip"
    Invoke-WebRequest -Uri $jdkUrl -OutFile $zipPath -UseBasicParsing

    Expand-Archive -Force $zipPath -DestinationPath $BaseDir
    Remove-Item $zipPath -Force

    # Î≤ÑÏ†ÑÎ≥Ñ Ìè¥Îçî Ïù¥Î¶Ñ ÏûêÎèô Í∞êÏßÄ ÌõÑ jdk-17 Î°ú ÌÜµÏùº
    $extracted = Get-ChildItem -Directory $BaseDir | Where-Object { $_.Name -like "jdk-17*" } | Select-Object -First 1
    if ($extracted -and $extracted.Name -ne "jdk-17") {
        Rename-Item -Path $extracted.FullName -NewName "jdk-17" -Force
    }
}

# JAVA_HOME ÏÑ§Ï†ï
if (!(Test-Path "$JavaDir\bin\java.exe")) {
    Write-Host "‚ùå JDK ÏÑ§Ïπò Ïã§Ìå®. Í≤ΩÎ°ú ÌôïÏù∏ ÌïÑÏöî: $JavaDir"
    exit 1
}

$env:JAVA_HOME = $JavaDir
[Environment]::SetEnvironmentVariable("JAVA_HOME", $JavaDir, "Machine")
$env:Path += ";$JavaDir\bin"

# ====== 3. Android Commandline Tools ÏÑ§Ïπò ======
if (!(Test-Path "$ToolsDir\bin\sdkmanager.bat")) {
    Write-Host "[INFO] Installing Android Commandline Tools..."
    $sdkUrl = "https://dl.google.com/android/repository/commandlinetools-win-11076708_latest.zip"
    $zipSdk = "$env:TEMP\cmdtools.zip"
    Invoke-WebRequest -Uri $sdkUrl -OutFile $zipSdk -UseBasicParsing

    Expand-Archive -Force $zipSdk -DestinationPath "$SdkRoot\cmdline-tools"
    Rename-Item -Path "$SdkRoot\cmdline-tools\cmdline-tools" -NewName "latest"
    Remove-Item $zipSdk -Force
}

$env:ANDROID_SDK_ROOT = $SdkRoot
[Environment]::SetEnvironmentVariable("ANDROID_SDK_ROOT", $SdkRoot, "Machine")
$SdkBin     = "$ToolsDir\bin"
$EmulatorExe= "$SdkRoot\emulator\emulator.exe"
$AvdManager = "$SdkBin\avdmanager.bat"

# ====== 4. SDK Ìå®ÌÇ§ÏßÄ ÏÑ§Ïπò ======
Write-Host "[INFO] Installing SDK components..."
& "$SdkBin\sdkmanager.bat" --sdk_root="$SdkRoot" --install "platform-tools" "emulator" | Out-Null

# ====== 5. System Image ÏÑ§Ïπò ======
$API = 30
$IMG = "system-images;android-$API;google_apis_playstore;x86_64"
Write-Host "[INFO] Installing system image: $IMG"
& "$SdkBin\sdkmanager.bat" --sdk_root="$SdkRoot" --install "$IMG" | Out-Null

# ====== 6. AVD ÏÉùÏÑ± ======
if (!(Test-Path $AVD_PATH)) {
    Write-Host "[INFO] Creating AVD: $AVD_NAME"
    & $AvdManager create avd -n $AVD_NAME -k $IMG --device "pixel" --force | Out-Null
    Start-Sleep -Seconds 5
} else {
    Write-Host "[INFO] Existing AVD found: $AVD_NAME"
}

# AVD ÏÉùÏÑ± Ïó¨Î∂Ä ÌôïÏù∏
if (!(Test-Path $AVD_CONFIG)) {
    Write-Host "‚ùå AVD ÏÉùÏÑ± Ïã§Ìå® ÎòêÎäî config.ini Í≤ΩÎ°úÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§."
    Write-Host "   ÌôïÏù∏ Í≤ΩÎ°ú: $AVD_PATH"
    exit 1
}

# ====== 7. ÌïòÎìúÏõ®Ïñ¥ ÌîÑÎ°úÌïÑ Ï†ÅÏö© ======
if (Test-Path $ProfileFile) {
    Write-Host "[INFO] Applying hardware profile from $ProfileFile"
    Get-Content $ProfileFile | Add-Content $AVD_CONFIG
} else {
    Write-Host "‚ö†Ô∏è  ÌïòÎìúÏõ®Ïñ¥ ÌîÑÎ°úÌïÑÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§. Í∏∞Î≥∏ ÏÑ§Ï†ïÏúºÎ°ú ÏßÑÌñâÌï©ÎãàÎã§."
}

# ====== 8. ÏóêÎÆ¨Î†àÏù¥ÌÑ∞ Ïã§Ìñâ ======
if (!(Test-Path $EmulatorExe)) {
    Write-Host "‚ùå emulator.exeÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§. SDK ÏÑ§ÏπòÎ•º ÌôïÏù∏ÌïòÏÑ∏Ïöî: $EmulatorExe"
    exit 1
}

Write-Host "[INFO] Launching emulator..."
Start-Process "$EmulatorExe" -ArgumentList "-avd", "$AVD_NAME", "-netdelay", "none", "-netspeed", "full", "-gpu", "host"
Write-Host "[SUCCESS] Emulator launched successfully üöÄ"







#!/usr/bin/env pwsh
Set-StrictMode -Version Latest
$ErrorActionPreference = "Stop"

# ====== 0. Í¥ÄÎ¶¨Ïûê Í∂åÌïú ÌôïÏù∏ ======
if (-not ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {
    Write-Host "‚ö†Ô∏è  Í¥ÄÎ¶¨Ïûê Í∂åÌïúÏúºÎ°ú PowerShellÏùÑ Îã§Ïãú Ïã§ÌñâÌï¥Ï£ºÏÑ∏Ïöî."
    exit 1
}

# ====== 1. Í≤ΩÎ°ú ÏÑ§Ï†ï ======
$BaseDir = "$env:USERPROFILE\AndroidEnv"
$SdkRoot = "$BaseDir\sdk"
$ToolsDir = "$SdkRoot\cmdline-tools\latest"
$JavaDir = "$BaseDir\jdk-17"
$ProfileDir = "$PSScriptRoot\profiles"
$ProfileFile = Join-Path $ProfileDir "note20.ini"

# ====== 2. JDK ÏÑ§Ïπò (Microsoft OpenJDK 17) ======
if (!(Test-Path "$JavaDir\bin\java.exe")) {
    Write-Host "[INFO] JDK ÏÑ§Ïπò Ï§ë..."
    $jdkUrl = "https://aka.ms/download-jdk/microsoft-jdk-17.0.11-windows-x64.zip"
    $zipPath = "$env:TEMP\jdk.zip"
    Invoke-WebRequest -Uri $jdkUrl -OutFile $zipPath
    Expand-Archive -Force $zipPath -DestinationPath $BaseDir
    Rename-Item -Path "$BaseDir\jdk-17.0.11+9" -NewName "jdk-17" -ErrorAction SilentlyContinue
    Remove-Item $zipPath -Force
}
$env:JAVA_HOME = $JavaDir
$env:Path += ";$JavaDir\bin"

# ====== 3. Android Commandline Tools ÏÑ§Ïπò ======
if (!(Test-Path "$ToolsDir\bin\sdkmanager.bat")) {
    Write-Host "[INFO] Android commandline-tools ÏÑ§Ïπò Ï§ë..."
    $sdkUrl = "https://dl.google.com/android/repository/commandlinetools-win-11076708_latest.zip"
    $zipSdk = "$env:TEMP\cmdtools.zip"
    Invoke-WebRequest -Uri $sdkUrl -OutFile $zipSdk
    Expand-Archive -Force $zipSdk -DestinationPath "$SdkRoot\cmdline-tools"
    Rename-Item -Path "$SdkRoot\cmdline-tools\cmdline-tools" -NewName "latest"
    Remove-Item $zipSdk -Force
}

$env:ANDROID_SDK_ROOT = $SdkRoot
$SdkBin = "$ToolsDir\bin"
$EmulatorExe = "$SdkRoot\emulator\emulator.exe"

# ====== 4. SDK Ìå®ÌÇ§ÏßÄ ÏÑ§Ïπò ======
Write-Host "[INFO] SDK Ìå®ÌÇ§ÏßÄ ÏÑ§Ïπò Ï§ë..."
& "$SdkBin\sdkmanager.bat" --sdk_root="$SdkRoot" --install "platform-tools" "emulator"

# ====== 5. System Image ÏÑ§Ïπò ======
$API = 30
$IMG = "system-images;android-$API;google_apis_playstore;x86_64"
& "$SdkBin\sdkmanager.bat" --sdk_root="$SdkRoot" --install "$IMG"

# ====== 6. AVD ÏÉùÏÑ± ======
$AVD_NAME = "Galaxy_Note20_256GB"
$AVD_DIR = "$env:USERPROFILE\.android\avd"
$AVD_CONFIG = "$AVD_DIR\$AVD_NAME.avd\config.ini"
$AvdManager = "$SdkBin\avdmanager.bat"

if (!(Test-Path "$AVD_DIR\$AVD_NAME.avd")) {
    Write-Host "[INFO] Creating AVD: $AVD_NAME"
    & $AvdManager create avd -n $AVD_NAME -k $IMG --device "pixel" --force
} else {
    Write-Host "[INFO] Existing AVD detected: $AVD_NAME"
}

# ====== 7. ÌïòÎìúÏõ®Ïñ¥ ÌîÑÎ°úÌïÑ Ï†ÅÏö© ======
if (Test-Path $ProfileFile) {
    Write-Host "[INFO] Applying hardware profile from $ProfileFile"
    Get-Content $ProfileFile | Add-Content $AVD_CONFIG
} else {
    Write-Host "‚ö†Ô∏è  ÌïòÎìúÏõ®Ïñ¥ ÌîÑÎ°úÌïÑ($ProfileFile)ÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§. Í∏∞Î≥∏ ÏÑ§Ï†ïÏúºÎ°ú ÏßÑÌñâÌï©ÎãàÎã§."
}

# ====== 8. Emulator Ïã§Ìñâ ======
Write-Host "[INFO] Launching emulator..."
Start-Process "$EmulatorExe" -ArgumentList "-avd", "$AVD_NAME", "-netdelay", "none", "-netspeed", "full", "-gpu", "host"







if ! command -v java >/dev/null 2>&1; then
  echo "[INFO] JDKÍ∞Ä ÏÑ§ÏπòÎêòÏñ¥ ÏûàÏßÄ ÏïäÏäµÎãàÎã§."
  read -p "OpenJDK 17ÏùÑ ÏÑ§ÏπòÌï†ÍπåÏöî? (y/n, Í∏∞Î≥∏Í∞í y): " install_jdk
  install_jdk=${install_jdk:-y}
  if [[ "$install_jdk" == "y" ]]; then
    if command -v apt >/dev/null 2>&1; then
      sudo apt update -y
      sudo apt install -y openjdk-17-jdk
    elif command -v dnf >/dev/null 2>&1; then
      sudo dnf install -y java-17-openjdk
    elif command -v brew >/dev/null 2>&1; then
      brew install openjdk@17
    elif [[ "$OS" == "Windows_NT" ]]; then
      echo "[INFO] Windows ÌôòÍ≤Ω Í∞êÏßÄÎê®. WingetÏúºÎ°ú ÏÑ§ÏπòÌï©ÎãàÎã§."
      winget install --id Microsoft.OpenJDK.17 -e || {
        echo "[ERROR] winget ÏÑ§Ïπò Ïã§Ìå®. https://learn.microsoft.com/en-us/java/openjdk/download ÏóêÏÑú ÏàòÎèô ÏÑ§Ïπò ÌïÑÏöî."
        exit 1
      }
    else
      echo "[ERROR] Ìå®ÌÇ§ÏßÄ Îß§ÎãàÏ†ÄÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§. ÏàòÎèôÏúºÎ°ú JDKÎ•º ÏÑ§ÏπòÌïòÏÑ∏Ïöî."
      exit 1
    fi
  else
    echo "[ERROR] JDK ÏóÜÏù¥ ÏßÑÌñâ Î∂àÍ∞Ä"
    exit 1
  fi
fi





#!/usr/bin/env pwsh
Set-StrictMode -Version Latest
$ErrorActionPreference = "Stop"

# ====== 1. ÏÑ†ÌÉù UI ======
Write-Host "=== Galaxy Emulator Launcher ==="
Write-Host "1) Galaxy Note 10"
Write-Host "2) Galaxy Note 20"
Write-Host "3) Galaxy S22"
$CHOICE = Read-Host "Select device [1-3]"

switch ($CHOICE) {
    1 {
        $DEVICE = "note10"
        $API = 29
        $IMG = "system-images;android-$API;google_apis_playstore;x86_64"
        $AVD_NAME = "Galaxy_Note10_256GB"
    }
    2 {
        $DEVICE = "note20"
        $API = 30
        $IMG = "system-images;android-$API;google_apis_playstore;x86_64"
        $AVD_NAME = "Galaxy_Note20_256GB"
    }
    3 {
        $DEVICE = "s22"
        $API = 32
        $IMG = "system-images;android-$API;google_apis_playstore;x86_64"
        $AVD_NAME = "Galaxy_S22_256GB"
    }
    Default {
        Write-Host "‚ùå Invalid selection" -ForegroundColor Red
        exit 1
    }
}

# ====== 2. ÌîÑÎ°úÌïÑ ÌååÏùº Ï°¥Ïû¨ ÌôïÏù∏ ======
$PROFILE_PATH = ".\profiles\$DEVICE.ini"
if (!(Test-Path $PROFILE_PATH)) {
    Write-Host "‚ùå Profile file not found: $PROFILE_PATH" -ForegroundColor Red
    exit 1
}

# ====== 3. SDK Ïù¥ÎØ∏ÏßÄ ÏÑ§Ïπò ======
Write-Host "[INFO] Installing required system image..."
& sdkmanager --install "$IMG"

# ====== 4. AVD ÏÉùÏÑ± ======
Write-Host "[INFO] Creating AVD: $AVD_NAME"
& avdmanager create avd -n "$AVD_NAME" -k "$IMG" --device "pixel" --force

# AVD ÏÑ§Ï†ï ÌååÏùº Í≤ΩÎ°ú
$AVD_PATH = "$env:USERPROFILE\.android\avd\$AVD_NAME.avd\config.ini"

# ====== 5. ÌïòÎìúÏõ®Ïñ¥ ÌîÑÎ°úÌïÑ Ï†ÅÏö© ======
Write-Host "[INFO] Applying hardware profile from $PROFILE_PATH"
Get-Content $PROFILE_PATH | Add-Content $AVD_PATH

# ====== 6. ÏóêÎÆ¨Î†àÏù¥ÌÑ∞ Ïã§Ìñâ ======
Write-Host "[INFO] Launching emulator..."
Start-Process "emulator" -ArgumentList "-avd", "$AVD_NAME", "-netdelay", "none", "-netspeed", "full", "-gpu", "host"







# ---------------------------------------------------------
# (6.5) Ïä§ÌÇ® Ìè¥ÎçîÎ•º SDK Í≤ΩÎ°úÎ°ú Î≥µÏÇ¨
# ---------------------------------------------------------
echo "[INFO] SDK Í≤ΩÎ°úÎ°ú Ïä§ÌÇ® Ìè¥Îçî Î≥µÏÇ¨ Ï§ë..."

SRC_SKINS_DIR="$SCRIPT_DIR/skins"
DEST_SKINS_DIR="$SDK_ROOT/skins"

# SDK ÎÇ¥Î∂Ä skins Ìè¥ÎçîÍ∞Ä ÏóÜÏúºÎ©¥ ÏÉùÏÑ±
mkdir -p "$DEST_SKINS_DIR"

# ÏÇ¨Ïö©Ïûê Ïä§ÌÇ® Ìè¥Îçî Ï†ÑÏ≤¥Î•º Î≥µÏÇ¨ (Í∏∞Ï°¥ ÌååÏùº ÎçÆÏñ¥Ïì∞Í∏∞)
if [ -d "$SRC_SKINS_DIR" ]; then
  echo "[INFO] $SRC_SKINS_DIR ‚Üí $DEST_SKINS_DIR Î≥µÏÇ¨"
  cp -r "$SRC_SKINS_DIR"/* "$DEST_SKINS_DIR"/
  echo "[OK] Ïä§ÌÇ® Î≥µÏÇ¨ ÏôÑÎ£å."
else
  echo "[WARN] $SRC_SKINS_DIR Ìè¥ÎçîÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§. Ïä§ÌÇ® Î≥µÏÇ¨Îäî ÏÉùÎûµÎê©ÎãàÎã§."
fi

# Ïù¥Ï†ú config.iniÏóêÏÑú Ï†àÎåÄÍ≤ΩÎ°ú ÎåÄÏã† Ïù¥Î¶ÑÎßå Ïç®ÎèÑ Ïù∏ÏãùÎê®



takeown /f "$env:USERPROFILE\.android" /r /d y
icacls "$env:USERPROFILE\.android" /grant "${env:USERNAME}:(OI)(CI)F" /t




# --- Fix Samsung skin path automatically ---
AVD_PATH="$HOME/.android/avd/${AVD_NAME}.avd"
SKIN_ABS_PATH="$(cd "$SKIN_DIR"; pwd)"
echo "[INFO] Ïä§ÌÇ® Í≤ΩÎ°ú Î≥¥Ï†ï Ï§ë: $SKIN_ABS_PATH"

# Í∏∞Ï°¥ skin.name, skin.path Ï†úÍ±∞ ÌõÑ Îã§Ïãú Í∏∞Î°ù
grep -v '^skin\.' "$AVD_PATH/config.ini" > "$AVD_PATH/config.tmp" || true
mv "$AVD_PATH/config.tmp" "$AVD_PATH/config.ini"

cat >> "$AVD_PATH/config.ini" <<EOF
skin.name=$(basename "$SKIN_ABS_PATH")
skin.path=$SKIN_ABS_PATH
EOF




#!/usr/bin/env bash
set -e

# ========================================
# Android Emulator Full Setup (bash version)
# ========================================

SDK_ROOT="$HOME/android-sdk"
CMDLINE_URL="https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip"
AVD_NAME="custom_avd"
JDK_PATH=""

echo "====================================="
echo "   Android Emulator Auto Setup"
echo "====================================="

# ---------------------------------------------------------
# (1) JDK ÏÑ§Ïπò ÌôïÏù∏ Î∞è Í≤ΩÎ°ú ÏÑ§Ï†ï
# ---------------------------------------------------------
if ! command -v java >/dev/null 2>&1; then
  echo "[INFO] JDKÍ∞Ä ÏÑ§ÏπòÎêòÏñ¥ ÏûàÏßÄ ÏïäÏäµÎãàÎã§."
  read -p "OpenJDK 17ÏùÑ ÏÑ§ÏπòÌï†ÍπåÏöî? (y/n, Í∏∞Î≥∏Í∞í y): " install_jdk
  install_jdk=${install_jdk:-y}
  if [[ "$install_jdk" == "y" ]]; then
    if command -v apt >/dev/null 2>&1; then
      sudo apt update -y
      sudo apt install -y openjdk-17-jdk
    elif command -v dnf >/dev/null 2>&1; then
      sudo dnf install -y java-17-openjdk
    elif command -v brew >/dev/null 2>&1; then
      brew install openjdk@17
    else
      echo "[ERROR] Ìå®ÌÇ§ÏßÄ Îß§ÎãàÏ†ÄÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§. ÏàòÎèôÏúºÎ°ú JDKÎ•º ÏÑ§ÏπòÌïòÏÑ∏Ïöî."
      exit 1
    fi
  else
    echo "[ERROR] JDK ÏóÜÏù¥ ÏßÑÌñâ Î∂àÍ∞Ä"
    exit 1
  fi
fi

# JDK Í≤ΩÎ°ú ÏûêÎèô ÌÉêÏÉâ
JDK_PATH=$(dirname "$(dirname "$(readlink -f "$(which java)")")")
if [[ -z "$JDK_PATH" || ! -d "$JDK_PATH" ]]; then
  echo "[WARN] JDK ÏÑ§Ïπò Í≤ΩÎ°úÎ•º ÏûêÎèôÏúºÎ°ú Ï∞æÏßÄ Î™ªÌñàÏäµÎãàÎã§. JAVA_HOMEÏùÑ ÏàòÎèô ÏßÄÏ†ïÌïòÏÑ∏Ïöî."
  read -p "JAVA_HOME Í≤ΩÎ°ú ÏûÖÎ†• (Ïòà: /usr/lib/jvm/java-17-openjdk-amd64): " manual_jdk
  export JAVA_HOME="${manual_jdk}"
else
  export JAVA_HOME="$JDK_PATH"
fi

export PATH="$JAVA_HOME/bin:$PATH"

java -version || { echo "[ERROR] java Î™ÖÎ†πÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§."; exit 1; }

echo "[OK] JAVA_HOME=$JAVA_HOME"

# ---------------------------------------------------------
# (2) Android SDK Commandline Tools ÏÑ§Ïπò
# ---------------------------------------------------------
if [ ! -d "$SDK_ROOT" ]; then
  echo "[INFO] Android SDK Commandline ToolsÎ•º Îã§Ïö¥Î°úÎìú Ï§ë..."
  mkdir -p "$SDK_ROOT/cmdline-tools"
  cd "$SDK_ROOT"
  curl -L -o cmdline-tools.zip "$CMDLINE_URL"
  unzip -q cmdline-tools.zip -d cmdline-tools
  mv cmdline-tools/cmdline-tools cmdline-tools/latest
  rm cmdline-tools.zip
fi

export ANDROID_HOME="$SDK_ROOT"
export ANDROID_SDK_ROOT="$SDK_ROOT"
export PATH="$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/emulator:$ANDROID_HOME/platform-tools:$PATH"

# ---------------------------------------------------------
# (3) SDK Íµ¨ÏÑ±ÏöîÏÜå ÏÑ§Ïπò (HTTPS Ï∞®Îã® Ïãú no_https ÏÇ¨Ïö©)
# ---------------------------------------------------------
echo "[INFO] SDK Íµ¨ÏÑ±ÏöîÏÜå ÏÑ§Ïπò Ï§ë..."
mkdir -p "$HOME/.android"
touch "$HOME/.android/repositories.cfg"

# Ìè¥Îçî Íµ¨Ï°∞ ÏûêÎèô ÍµêÏ†ï
if [ -d "$ANDROID_HOME/cmdline-tools/cmdline-tools" ]; then
  mv "$ANDROID_HOME/cmdline-tools/cmdline-tools" "$ANDROID_HOME/cmdline-tools/latest"
fi

SDKMANAGER="$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager"

# HTTPS Ïö∞Ìöå Î™®Îìú
$SDKMANAGER --no_https --licenses >/dev/null || true
$SDKMANAGER --no_https "platform-tools" "emulator"

# ---------------------------------------------------------
# (4) Android ÏãúÏä§ÌÖú Ïù¥ÎØ∏ÏßÄ ÏÑ†ÌÉù Î∞è ÏÑ§Ïπò
# ---------------------------------------------------------
echo
echo "Ïñ¥Îñ§ ÏïàÎìúÎ°úÏù¥Îìú ÏãúÏä§ÌÖú Ïù¥ÎØ∏ÏßÄÎ•º ÏÇ¨Ïö©Ìï†ÍπåÏöî?"
echo "1) Android 13 (Google APIs)"
echo "2) Android 14 (Google Play)"
read -p "Î≤àÌò∏ ÏûÖÎ†• (Í∏∞Î≥∏Í∞í 2): " sys_choice
sys_choice=${sys_choice:-2}

if [[ "$sys_choice" == "1" ]]; then
  SYS_IMG="system-images;android-33;google_apis;x86_64"
else
  SYS_IMG="system-images;android-34;google_apis_playstore;x86_64"
fi

$SDKMANAGER --no_https "$SYS_IMG"

# ---------------------------------------------------------
# (5) Ïä§ÌÇ® ÏÑ†ÌÉù (Î°úÏª¨ skins/ Ìè¥ÎçîÏóêÏÑú)
# ---------------------------------------------------------
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
echo
echo "Ïñ¥Îñ§ ÌïòÎìúÏõ®Ïñ¥Î•º AVDÎ°ú ÏÉùÏÑ±Ìï†ÍπåÏöî?"
echo "1) Samsung Galaxy Note20"
echo "2) Samsung Galaxy S22"
echo "3) Samsung Galaxy S24 Ultra"
read -p "Î≤àÌò∏ ÏûÖÎ†• (Í∏∞Î≥∏Í∞í 2): " hw_choice
hw_choice=${hw_choice:-2}

case $hw_choice in
  1) HW_NAME="Galaxy_Note20" ;;
  2) HW_NAME="Galaxy_S22" ;;
  3) HW_NAME="Galaxy_S24Ultra" ;;
esac

SKIN_DIR="$SCRIPT_DIR/skins/$HW_NAME"
if [ ! -d "$SKIN_DIR" ]; then
  echo "[ERROR] Ïä§ÌÇ® Ìè¥ÎçîÍ∞Ä Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏäµÎãàÎã§: $SKIN_DIR"
  exit 1
fi
echo "[INFO] Ïä§ÌÇ® Í≤ΩÎ°ú Ïù∏Ïãù ÏôÑÎ£å: $SKIN_DIR"

# ---------------------------------------------------------
# (6) RAM / Ïä§ÌÜ†Î¶¨ÏßÄ ÏÑ§Ï†ï
# ---------------------------------------------------------
read -p "RAM ÌÅ¨Í∏∞(MB) [Í∏∞Î≥∏Í∞í 4096]: " RAM_SIZE
RAM_SIZE=${RAM_SIZE:-4096}
read -p "Ïä§ÌÜ†Î¶¨ÏßÄ ÌÅ¨Í∏∞(MB) [Í∏∞Î≥∏Í∞í 8192]: " STORAGE_SIZE
STORAGE_SIZE=${STORAGE_SIZE:-8192}

# ---------------------------------------------------------
# (7) AVD ÏÉùÏÑ±
# ---------------------------------------------------------
echo "[INFO] AVD ÏÉùÏÑ± Ï§ë..."
yes "no" | avdmanager create avd \
  -n "$AVD_NAME" \
  -k "$SYS_IMG" \
  -d pixel_6 \
  --sdcard "${STORAGE_SIZE}M" \
  --force

AVD_PATH="$HOME/.android/avd/${AVD_NAME}.avd"
cat >> "$AVD_PATH/config.ini" <<EOF
hw.ramSize=$RAM_SIZE
skin.name=$HW_NAME
skin.path=$SKIN_DIR
EOF

# ---------------------------------------------------------
# (8) ÏóêÎÆ¨Î†àÏù¥ÌÑ∞ Ïã§Ìñâ
# ---------------------------------------------------------
echo "[INFO] ÏóêÎÆ¨Î†àÏù¥ÌÑ∞Î•º Ïã§ÌñâÌï©ÎãàÎã§..."
emulator -avd "$AVD_NAME" -netdelay none -netspeed full &







::::::::::::
#!/usr/bin/env bash

set -e

# ============================
# Í∏∞Î≥∏ ÏÑ§Ï†ï
# ============================
SDK_ROOT="$HOME/android-sdk"
CMDLINE_URL="https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip"
AVD_NAME="custom_avd"

echo "====================================="
echo "  Android Emulator Setup Wizard"
echo "====================================="

# ============================
# (1) JDK ÏÑ§Ïπò Ïó¨Î∂Ä ÌôïÏù∏
# ============================
if ! command -v java >/dev/null 2>&1; then
  echo "[INFO] JDKÍ∞Ä ÏÑ§ÏπòÎêòÏñ¥ ÏûàÏßÄ ÏïäÏäµÎãàÎã§."
  read -p "OpenJDK 17ÏùÑ ÏÑ§ÏπòÌï†ÍπåÏöî? (y/n): " install_jdk
  if [[ "$install_jdk" == "y" ]]; then
    sudo apt update -y
    sudo apt install -y openjdk-17-jdk
  else
    echo "JDK ÏÑ§Ïπò ÏóÜÏù¥ ÏßÑÌñâÌï† Ïàò ÏóÜÏäµÎãàÎã§. Ï¢ÖÎ£åÌï©ÎãàÎã§."
    exit 1
  fi
else
  echo "[OK] JDKÍ∞Ä Ïù¥ÎØ∏ ÏÑ§ÏπòÎêòÏñ¥ ÏûàÏäµÎãàÎã§."
fi

# ============================
# (2) SDK / Î™ÖÎ†πÏ§Ñ ÎèÑÍµ¨ ÏÑ§Ïπò
# ============================
if [ ! -d "$SDK_ROOT" ]; then
  echo "[INFO] Android SDKÎ•º ÏÑ§ÏπòÌï©ÎãàÎã§..."
  mkdir -p "$SDK_ROOT/cmdline-tools"
  cd "$SDK_ROOT"
  curl -o cmdline-tools.zip $CMDLINE_URL
  unzip cmdline-tools.zip -d cmdline-tools
  mv cmdline-tools/cmdline-tools cmdline-tools/latest
  rm cmdline-tools.zip
fi

export ANDROID_HOME="$SDK_ROOT"
export PATH="$ANDROID_HOME/emulator:$ANDROID_HOME/tools:$ANDROID_HOME/tools/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/cmdline-tools/latest/bin:$PATH"

# ============================
# SDK Ìå®ÌÇ§ÏßÄ ÏÑ§Ïπò
# ============================
echo "[INFO] SDK Íµ¨ÏÑ±ÏöîÏÜåÎ•º ÏóÖÎç∞Ïù¥Ìä∏ Ï§ë..."
yes | sdkmanager --licenses >/dev/null || true
yes | sdkmanager "platform-tools" "emulator" >/dev/null

# ============================
# (3) ÌïòÎìúÏõ®Ïñ¥ Í∏∞Í∏∞ ÏÑ†ÌÉù
# ============================
echo
echo "Ïñ¥Îñ§ ÌïòÎìúÏõ®Ïñ¥Î•º AVDÎ°ú ÏÉùÏÑ±Ìï†ÍπåÏöî?"
echo "1) Samsung Galaxy Note20"
echo "2) Samsung Galaxy S22"
echo "3) Samsung Galaxy S24 Ultra"
read -p "Î≤àÌò∏Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî (1~3): " hw_choice

case $hw_choice in
  1) HW_NAME="Galaxy_Note20"; SKIN_URL="https://developer.samsung.com/android/tools/emulator-skins/Note20.zip" ;;
  2) HW_NAME="Galaxy_S22"; SKIN_URL="https://developer.samsung.com/android/tools/emulator-skins/S22.zip" ;;
  3) HW_NAME="Galaxy_S24Ultra"; SKIN_URL="https://developer.samsung.com/android/tools/emulator-skins/S24Ultra.zip" ;;
  *) echo "ÏûòÎ™ªÎêú ÏÑ†ÌÉùÏûÖÎãàÎã§."; exit 1 ;;
esac

SKIN_DIR="$ANDROID_HOME/skins/$HW_NAME"
mkdir -p "$SKIN_DIR"
echo "[INFO] ÏÇºÏÑ± Ïä§ÌÇ® Îã§Ïö¥Î°úÎìú Ï§ë..."
curl -L -o "$SDK_ROOT/${HW_NAME}.zip" "$SKIN_URL"
unzip -o "$SDK_ROOT/${HW_NAME}.zip" -d "$SKIN_DIR"
rm "$SDK_ROOT/${HW_NAME}.zip"

# ============================
# (4) ÏãúÏä§ÌÖú Ïù¥ÎØ∏ÏßÄ ÏÑ†ÌÉù
# ============================
echo
echo "Ïñ¥Îñ§ ÏïàÎìúÎ°úÏù¥Îìú ÏãúÏä§ÌÖú Ïù¥ÎØ∏ÏßÄÎ•º ÏÇ¨Ïö©Ìï†ÍπåÏöî?"
echo "1) Android 13 (Google APIs)"
echo "2) Android 14 (Google Play)"
read -p "Î≤àÌò∏Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî (1~2): " sys_choice

case $sys_choice in
  1) SYS_IMG="system-images;android-33;google_apis;x86_64" ;;
  2) SYS_IMG="system-images;android-34;google_apis_playstore;x86_64" ;;
  *) echo "ÏûòÎ™ªÎêú ÏÑ†ÌÉùÏûÖÎãàÎã§."; exit 1 ;;
esac

echo "[INFO] ÏãúÏä§ÌÖú Ïù¥ÎØ∏ÏßÄ Îã§Ïö¥Î°úÎìú Ï§ë..."
yes | sdkmanager "$SYS_IMG"

# ============================
# (5) ÌïòÎìúÏõ®Ïñ¥ ÌîÑÎ°úÌïÑ ÏÑ§Ï†ï
# ============================
read -p "RAM ÌÅ¨Í∏∞(MB): " RAM_SIZE
read -p "Ïä§ÌÜ†Î¶¨ÏßÄ ÌÅ¨Í∏∞(MB): " STORAGE_SIZE

# ============================
# (6) AVD ÏÉùÏÑ±
# ============================
echo "[INFO] AVDÎ•º ÏÉùÏÑ± Ï§ë..."
echo no | avdmanager create avd \
  -n "$AVD_NAME" \
  -k "$SYS_IMG" \
  -d pixel_6 \
  --sdcard "${STORAGE_SIZE}M" \
  --force

# config.ini ÏàòÏ†ï
AVD_PATH="$HOME/.android/avd/${AVD_NAME}.avd"
cat >> "$AVD_PATH/config.ini" <<EOF
hw.ramSize=$RAM_SIZE
skin.name=$HW_NAME
skin.path=$SKIN_DIR
EOF

# ============================
# (7) ÏóêÎÆ¨Î†àÏù¥ÌÑ∞ Ïã§Ìñâ
# ============================
echo "[INFO] ÏóêÎÆ¨Î†àÏù¥ÌÑ∞Î•º Ïã§ÌñâÌï©ÎãàÎã§..."
emulator -avd "$AVD_NAME" -netdelay none -netspeed full &
